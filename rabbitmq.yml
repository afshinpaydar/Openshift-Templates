apiVersion: v1
kind: Template
metadata:
  name: rabbitmq-ha
  annotations:
    shortDescription: "RabbitMQ is an open-source message-broker software"
    description: "RabbitMQ is an open-source message-broker software (sometimes called message-oriented middleware) that originally implemented the Advanced Message Queuing Protocol (AMQP) and has since been extended with a plug-in architecture to support Streaming Text Oriented Messaging Protocol (STOMP), Message Queuing Telemetry Transport (MQTT), and other protocols."
    iconClass: icon-rabbitmq
    tags: rabbitmq,queue,messaging,broker,amqp

parameters:
- name: NAMESPACE
  displayName: Namespace
  description: "The namespace to instantiate RabbitMQ under (current namespace)."
  required: true

- name: RABBITMQ_CLUSTER_NAME
  displayName: RabbitMQ Cluster Name
  description: "Name of the RabbitMQ cluster"
  value: rabbitmq-ha
  required: true

- name: RABBITMQ_IMAGE
  displayName: RabbitMQ Image
  description: "Image to deploy"
  value: rabbitmq:3.7.14-management-alpine
  required: true

- name: RABBITMQ_EXPORTER_IMAGE
  displayName: RabbitMQ Exporter Image
  description: "Exporter image to deploy"
  value: kbudde/rabbitmq-exporter:v0.29.0
  required: true

- name: RABBITMQ_USER
  displayName: RabbitMQ User
  description: "Username for the RabbitMQ instance"
  value: rabbitmq
  required: true

- name: RABBITMQ_PASS
  displayName: RabbitMQ Pass
  description: "Password securing the RabbitMQ instance"
  generate: expression
  from: "[a-zA-Z0-9]{16}"

- name: RABBITMQ_ERLANG_COOKIE
  displayName: RabbitMQ Erlang Cookie
  description: "Cookie used for authentication of cluster nodes"
  generate: expression
  from: "[a-zA-Z0-9]{16}"

- name: RABBITMQ_VM_MEMORY_HIGH_WATERMARK_RELATIVE
  displayName: RabbitMQ VM Memory High Watermark
  description: "Configuring the Memory Threshold, formula: rabbitmqMemoryHighWatermark = 0.9 * resources.limits.memory"
  value: "0.9"
  required: true

- name: RABBITMQ_REPLICAS
  displayName: RabbitMQ Replicas
  description: "Number of RabbitMQ replicas"
  value: "3"
  required: true

- name: RABBITMQ_VOLUME_SIZE
  displayName: RabbitMQ Volume Size
  description: "Size of the RabbitMQ data volume"
  value: 1Gi
  required: true

- name: RABBITMQ_MEMORY_LIMIT
  displayName: RabbitMQ Memory Limit
  description: "Size of the RabbitMQ memory"
  value: 1Gi
  required: true

- name: RABBITMQ_EXPORTER_MEMORY_LIMIT
  displayName: RabbitMQ Exporter Memory Limit
  description: "Size of the RabbitMQ memory"
  value: 200Mi
  required: true

objects:

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: rabbitmq
    namespace: "${NAMESPACE}"
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}

- kind: RoleBinding
  apiVersion: v1
  metadata:
    name: ${RABBITMQ_CLUSTER_NAME}
    namespace: ${NAMESPACE}
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}
  roleRef:
    kind: Role
    name: view
  subjects:
  - kind: ServiceAccount
    name: rabbitmq

- kind: Secret
  apiVersion: v1
  metadata:
    name: ${RABBITMQ_CLUSTER_NAME}
    namespace: ${NAMESPACE}
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}
  type: Opaque
  stringData:
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASS}
    url: "amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_CLUSTER_NAME}"
    cookie: ${RABBITMQ_ERLANG_COOKIE}

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${RABBITMQ_CLUSTER_NAME}
    namespace: ${NAMESPACE}
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}
  data:
    rabbitmq.conf: |
        ## RabbitMQ configuration
        ## Ref: https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example

        ## Authentification

        ## Clustering
        ## Related doc guide: https://www.rabbitmq.com/ha.html#queue-master-location
        queue_master_locator = min-masters
        cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
        cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
        cluster_formation.k8s.address_type = hostname
        cluster_formation.node_cleanup.interval = 10
        # Set to false if automatic cleanup of absent nodes is desired.
        # This can be dangerous, see http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup.
        cluster_formation.node_cleanup.only_log_warning = true
        cluster_partition_handling = autoheal

        ## The default \"guest\" user is only permitted to access the server
        ## via a loopback interface (e.g. localhost)
        loopback_users.guest = false

        ## Memory-based Flow Control threshold
        # vm_memory_high_watermark.absolute = 615MB
        vm_memory_high_watermark.relative = ${RABBITMQ_VM_MEMORY_HIGH_WATERMARK_RELATIVE}

    enabled_plugins: |
        [rabbitmq_shovel,rabbitmq_shovel_management,rabbitmq_federation,rabbitmq_federation_management,rabbitmq_consistent_hash_exchange,rabbitmq_management,rabbitmq_peer_discovery_k8s].

- kind: Service
  apiVersion: v1
  metadata:
    name: ${RABBITMQ_CLUSTER_NAME}
    namespace: ${NAMESPACE}
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}
  spec:
    selector:
      app: ${RABBITMQ_CLUSTER_NAME}
    ports:
     - name: epmd
       protocol: TCP
       port: 4369
       targetPort: epmd
     - name: amqp
       protocol: TCP
       port: 5672
       targetPort: amqp
     - name: http
       protocol: TCP
       port: 15672
       targetPort: http
     - name: exporter
       protocol: TCP
       port: 9090
       targetPort: exporter

- kind: Service
  apiVersion: v1
  metadata:
    name: ${RABBITMQ_CLUSTER_NAME}-discovery
    namespace: ${NAMESPACE}
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}
  spec:
    selector:
      app: ${RABBITMQ_CLUSTER_NAME}
    clusterIP: None
    ports:
     - name: epmd
       protocol: TCP
       port: 4369
       targetPort: epmd
     - name: amqp
       protocol: TCP
       port: 5672
       targetPort: amqp
     - name: http
       protocol: TCP
       port: 15672
       targetPort: http

- kind: Route
  apiVersion: v1
  metadata:
    name: ${RABBITMQ_CLUSTER_NAME}
    namespace: ${NAMESPACE}
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}
      router: private
  spec:
    host: "${RABBITMQ_CLUSTER_NAME}-${NAMESPACE}.apps.private.teh-1.snappcloud.io"
    port:
      targetPort: http
    to:
      kind: Service
      name: ${RABBITMQ_CLUSTER_NAME}

- kind: StatefulSet
  apiVersion: apps/v1beta1
  metadata:
    name: ${RABBITMQ_CLUSTER_NAME}
    namespace: ${NAMESPACE}
    labels:
      app: ${RABBITMQ_CLUSTER_NAME}
  spec:
    serviceName: ${RABBITMQ_CLUSTER_NAME}-discovery
    replicas: ${RABBITMQ_REPLICAS}
    podManagementPolicy: "OrderedReady"
    updateStrategy:
      type: "OnDelete"
    selector:
      matchLabels:
        app: ${RABBITMQ_CLUSTER_NAME}
    template:
      metadata:
        labels:
          app: ${RABBITMQ_CLUSTER_NAME}
      spec:
        serviceAccountName: rabbitmq
        terminationGracePeriodSeconds: 30
        initContainers:
        - name: init-rabbitmq
          image: busybox:latest
          command: ['sh', '-c', 'cp /configmap/* /etc/rabbitmq; rm -f /var/lib/rabbitmq/.erlang.cookie']
          resources:
            requests:
              memory: 150Mi
            limits:
              memory: 150Mi
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: config
              mountPath: /etc/rabbitmq
            - name: data
              mountPath: /var/lib/rabbitmq
        containers:
        - name: exporter
          image: ${RABBITMQ_EXPORTER_IMAGE}
          imagePullPolicy: IfNotPresent
          ports:
            - name: exporter
              protocol: TCP
              containerPort: 9090
          resources:
            requests:
              memory: ${RABBITMQ_EXPORTER_MEMORY_LIMIT}
            limits:
              memory: ${RABBITMQ_EXPORTER_MEMORY_LIMIT}
          env:
          - name: PUBLISH_PORT
            value: "9090"
          - name: RABBIT_CAPABILITIES
            value: "bert,no_sort"
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                name: ${RABBITMQ_CLUSTER_NAME}
                key: username
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${RABBITMQ_CLUSTER_NAME}
                key: password

        - name: rabbitmq
          image: ${RABBITMQ_IMAGE}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /etc/rabbitmq
            - name: data
              mountPath: /var/lib/rabbitmq
          ports:
            - name: epmd
              protocol: TCP
              containerPort: 4369
            - name: amqp
              protocol: TCP
              containerPort: 5672
            - name: http
              protocol: TCP
              containerPort: 15672
          resources:
            requests:
              memory: ${RABBITMQ_MEMORY_LIMIT}
            limits:
              memory: ${RABBITMQ_MEMORY_LIMIT}
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - 'BASIC_CREDENTIAL=$(echo -n "$RABBITMQ_DEFAULT_USER:$RABBITMQ_DEFAULT_PASS" | base64); wget -O - -q --header "Authorization: Basic $BASIC_CREDENTIAL" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - 'BASIC_CREDENTIAL=$(echo -n "$RABBITMQ_DEFAULT_USER:$RABBITMQ_DEFAULT_PASS" | base64); wget -O - -q --header "Authorization: Basic $BASIC_CREDENTIAL" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
            failureThreshold: 6
            initialDelaySeconds: 20
            timeoutSeconds: 3
            periodSeconds: 5
          env:
          - name: RABBITMQ_DEFAULT_USER
            valueFrom:
              secretKeyRef:
                name: ${RABBITMQ_CLUSTER_NAME}
                key: username
          - name: RABBITMQ_DEFAULT_PASS
            valueFrom:
              secretKeyRef:
                name: ${RABBITMQ_CLUSTER_NAME}
                key: password
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                name: ${RABBITMQ_CLUSTER_NAME}
                key: cookie
          - name: K8S_SERVICE_NAME
            value: ${RABBITMQ_CLUSTER_NAME}-discovery
          - name: K8S_HOSTNAME_SUFFIX
            value: ".${RABBITMQ_CLUSTER_NAME}-discovery.${NAMESPACE}.svc.cluster.local"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: RABBITMQ_NODENAME
            value: "rabbit@$(POD_NAME).${RABBITMQ_CLUSTER_NAME}-discovery.${NAMESPACE}.svc.cluster.local"
        volumes:
          - name: config
            emptyDir: {}
          - name: configmap
            configMap:
              name: ${RABBITMQ_CLUSTER_NAME}
              items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
              - key: enabled_plugins
                path: enabled_plugins
    volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "glusterfs-storage-nocache"
        resources:
          requests:
            storage: ${RABBITMQ_VOLUME_SIZE}

