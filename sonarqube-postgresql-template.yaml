kind: Template
apiVersion: v1
metadata:
  annotations:
    description: The SonarQube OpenShift template
    tags: instant-app,sonarqube
  name: sonarqube
message: "Login to SonarQube with the default admin user: admin/admin"
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: sonarqube
    labels:
      app: sonarqube
      deploymentconfig: sonarqube
  spec:
    ports:
    - name: sonarqube
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for SonarQube's http service.
    name: sonarqube
    labels:
      app: sonarqube
  spec:
    to:
      kind: Service
      name: sonarqube
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    tags:
    - annotations:
        description: The SonarQube Docker image
        tags: sonarqube
      from:
        kind: DockerImage
        name: openshiftdemos/sonarqube:${SONARQUBE_VERSION}
      importPolicy: {}
      name: ${SONARQUBE_VERSION}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: sonarqube
      deploymentconfig: sonarqube
    name: sonarqube
  spec:
    replicas: 1
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.sonarqube.image.entrypoint: '["./bin/run.sh"]'
        creationTimestamp: null
        labels:
          app: sonarqube
          deploymentconfig: sonarqube
      spec:
        containers:
        - env:
          - name: SONARQUBE_JDBC_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: SONARQUBE_JDBC_URL
            value: jdbc:postgresql://postgresql/sonar
          - name: SONARQUBE_JDBC_USERNAME
            value: sonar
          image: ' '
          imagePullPolicy: IfNotPresent
          name: sonarqube
          ports:
          - containerPort: 9000
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            httpGet:
              port: 9000
              path: /
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            httpGet:
              port: 9000
              path: /
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 1Gi
            limits:
              cpu: 1
              memory: 2Gi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: sonarqube-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonarqube-data
          persistentVolumeClaim:
            claimName: sonarqube-data
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - sonarqube
        from:
          kind: ImageStreamTag
          name: sonarqube:${SONARQUBE_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: postgresql-sonarqube
    labels:
      app: sonarqube
      deploymentconfig: sonarqube
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: sonarqube
      deploymentconfig: postgresql-sonarqube
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-name: ${POSTGRESQL_DATABASE}
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: ${POSTGRESQL_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql-sonarqube")].port}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
      - name: postgresql
        nodePort: 0
        port: 5432
        protocol: TCP
        targetPort: 5432
    selector:
      app: sonarqube
      deploymentconfig: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${DATABASE_EXPORTER_SERVICE_NAME}
  spec:
    ports:
      - name: postgresql-exporter
        nodePort: 0
        port: 9187
        protocol: TCP
        targetPort: 9187
    selector:
      app: sonarqube
      deploymentconfig: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    storageClassName: block-storage-standard
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: sonarqube
      deploymentconfig: postgresql-sonarqube
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      app: sonarqube
      deploymentconfig: postgresql-sonarqube
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9187"
          prometheus.io/path: "/metrics"
        labels:
          app: sonarqube
          deploymentconfig: postgresql-sonarqube
      spec:
        initContainers:
          - name: init-chown-data
            image: busybox
            command:
              - 'sh'
              - '-c'
              - 'chmod 0750 /bitnami/postgresql/data/whereever | true'
            volumeMounts:
              - name: ${DATABASE_SERVICE_NAME}-data
                mountPath: /bitnami/postgresql/data
        containers:
          - name: postgres-exporter
            image: wrouesnel/postgres_exporter
            ports:
              - containerPort: 9187
                protocol: TCP
            env:
              - name: TZ
                value: Asia/Tehran
              - name: DATA_SOURCE_USER
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: ${DATABASE_SERVICE_NAME}
              - name: DATA_SOURCE_PASS
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: ${DATABASE_SERVICE_NAME}
              - name: DATA_SOURCE_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: ${DATABASE_SERVICE_NAME}
              - name: DATA_SOURCE_URI
                value: "${DATABASE_SERVICE_NAME}:5432/$(DATA_SOURCE_DATABASE)?sslmode=disable"
          - name: postgresql
            image: bitnami/postgresql:${POSTGRESQL_VERSION}
            imagePullPolicy: IfNotPresent
            env:
              - name: POSTGRESQL_DATA_DIR
                value: '/bitnami/postgresql/data/whereever'
              - name: NEW_POSTGRESQL_USERNAME
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: ${DATABASE_SERVICE_NAME}
              - name: POSTGRESQL_USERNAME
                value: postgres
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: ${DATABASE_SERVICE_NAME}
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: ${DATABASE_SERVICE_NAME}
            ports:
              - containerPort: 5432
                protocol: TCP
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
              - mountPath: /bitnami/postgresql
                name: ${DATABASE_SERVICE_NAME}-empty
              - mountPath: /docker-entrypoint-initdb.d
                name: ${DATABASE_SERVICE_NAME}-init
              - mountPath: /bitnami/postgresql/data
                name: ${DATABASE_SERVICE_NAME}-data
              - mountPath: /bitnami/postgresql/conf/conf.d/extended.conf
                name: ${DATABASE_SERVICE_NAME}-config
                subPath: extended.conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
          - name: ${DATABASE_SERVICE_NAME}-empty
            emptryDir: {}
          - name: ${DATABASE_SERVICE_NAME}-init
            configMap:
              name: ${DATABASE_SERVICE_NAME}-init
          - name: ${DATABASE_SERVICE_NAME}-config
            configMap:
              name: ${DATABASE_SERVICE_NAME}-config
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
        - type: ConfigChange
    status: {}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${DATABASE_SERVICE_NAME}-config
  data:
    extended.conf: |-
      max_connections = 512
      shared_buffers = 1536MB
      effective_cache_size = 4608MB
      maintenance_work_mem = 384MB
      checkpoint_completion_target = 0.7
      wal_buffers = 16MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 1536kB
      min_wal_size = 1GB
      max_wal_size = 2GB
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${DATABASE_SERVICE_NAME}-init
  data:
    create-user.sh: |-
      local -r escaped_password="${POSTGRESQL_PASSWORD//\'/\'\'}"
      PGPASSWORD=postgres psql -U postgres -c "CREATE USER ${NEW_POSTGRESQL_USERNAME};" || true
      PGPASSWORD=postgres psql -U postgres -c "ALTER USER ${NEW_POSTGRESQL_USERNAME} WITH CREATEDB CREATEROLE SUPERUSER REPLICATION;" || true
      PGPASSWORD=postgres psql -U postgres -c "ALTER USER ${NEW_POSTGRESQL_USERNAME} WITH PASSWORD '$escaped_password';" || true


parameters:
- displayName: SonarQube version
  value: "6.7"
  name: SONARQUBE_VERSION
  required: true
- description: Password for SonarQube Server PostgreSQL backend
  displayName: SonarQube's PostgreSQL Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Volume space available for PostgreSQL
  displayName: PostgreSQL Volume Capacity
  name: POSTGRESQL_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Volume space available for SonarQube
  displayName: SonarQube Volume Capacity
  name: SONAR_VOLUME_CAPACITY
  required: true
  value: 1Gi

- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi

- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql

- description: The name of the OpenShift Service exposed for the database exporter.
  displayName: Database exporter Service Name
  name: DATABASE_EXPORTER_SERVICE_NAME
  required: true
  value: postgresql-exporter

- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true

- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true

- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: sampledb

- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi

- description: |-
    Version of PostgreSQL image to be used
    (see https://github.com/bitnami/bitnami-docker-postgresql for more information).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: "11.4.0"
